#include <ESP8266WiFi.h>
//#include <Ticker.h>  //Ticker Library
// 
//Ticker usart;

const char* ssid     = "Agnes"; //nama wifi
const char* password = "agnes2004"; //password
const char* host = "192.168.43.109"; //IP PC

int incomingByte;
int data_num = 0;
int inputBuffer[12]; //if jumlah data send=x, size inputBuffer = x+1, inputBuffer[0] tidak dipakai

bool is_data_num_received = false;
bool is_data_complete = false;
int pH1;
int pH2;
int tds1;
int tds1_a;
int tds1_b;
int tds2; 
int tds2_a;
int tds2_b;
int water_temp;
int humidity; 
int air_temp; 
int co2;
int co2_a;
int co2_b;
int pH1Cloud;
int pH2Cloud;
int tds1Cloud;
int tds2Cloud;
int water_tempCloud;
int humidityCloud; 
int air_tempCloud; 
int co2Cloud;
int enabler_terimaData = 1;
 
//=======================================================================
//                               Setup
//=======================================================================
void setup()
{
    Serial.begin(115200);
    Serial.println("");
    Serial1.begin(115200);
    Serial.println("ready");
 
    //Initialize Ticker every 0.5s
    //usart.attach(0.02, terimaData); //Use <strong>attach_ms</strong> if you need time in ms
    Serial.println("ready");
      Serial.begin(115200);
  delay(10);
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
 
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
 
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

}
//=======================================================================
//                MAIN LOOP
//=======================================================================
void loop()
{
//  terimaData();
  delay(5000); //time space for terimaData
//  enabler_terimaData = 1;
//  delay(5000);
  /*send_toCloud();*/

  /*end of send_toCloud();*/
  //  enabler_terimaData = 0;
  Serial.print("connecting to ");
  WiFiClient client;
 
//char query[] = "SELECT stats FROM tbl_parameter WHERE id='1'";

  
  // We now create a URI for the request
  String url = "/SentraFarm/add.php?";
  
  url += "pH1Cloud=";
  url += pH1Cloud;
  
  url += "&pH2Cloud=";
  url += pH2Cloud;
  
//  url += "&tds1Cloud=";
//  url += tds1Cloud;
//  
//  url += "&tds2Cloud=";
//  url += tds2Cloud;
//  
//  url += "&water_tempCloud=";
//  url += water_tempCloud;
//  
//  url += "&humidityCloud=";
//  url += humidityCloud;
//  
//  url += "&air_tempCloud=";
//  url += air_tempCloud;
//  
//  url += "&co2Cloud=";
//  url += co2Cloud;

  Serial.print("Requesting URL: ");
  Serial.println(url); 
  
//  delay(1000);
  // This will send the request to the server
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n\r\n");
               
//  unsigned long timeout = millis();
//  while (client.available() == 0) {
//    if (millis() - timeout > 5000) {
//      Serial.println(">>> Client Timeout !");
//      client.stop();
//      return;
//    }
//  }
  unsigned long timeout_count = 0;
  while (client.available() == 0) {
    timeout_count++;
    delay(2);
    if (timeout_count > 5000) {
      Serial.println(">>> Client Timeout !");
      client.stop();
      return;
    }
  }

  // Read all the lines of the reply from server and print them to Serial
  while (client.available()) {
    String line = client.readStringUntil('\r');
    //Serial.print(line);
 
    if (line.indexOf("sukses gaes") != -1) {
      Serial.println();
      Serial.println("Yes, data masuk");
    } else if (line.indexOf("gagal gaes") != -1) {
      Serial.println();
      Serial.println("Maaf, data gagal masuk");
//      digitalWrite(alarmPin, HIGH);
    }
  }
 
  Serial.println();
  Serial.println("closing connection");
//  delay(10000);
//  enabler_terimaData = 1;
}

void terimaData() {
  if(enabler_terimaData==1){
  if(Serial.available() > 0){ //while debugging using Mega, change to Serial1.available() 
    incomingByte = Serial.read(); //baca char
    if (incomingByte > 240) {
      //jika char diatas 240 berarti flag
      switch (incomingByte) {
        //pilih data mana berdasar flag
        case 255:
          data_num = 1;
          is_data_num_received = true;
          break;
        case 254:
          data_num = 2;
          is_data_num_received = true;
          break;
        case 253:
          data_num = 3;
          is_data_num_received = true;
          break;
        case 252:
          data_num = 4;
          is_data_num_received = true;
          break;
        case 251:
          data_num = 5;
          is_data_num_received = true;
          break;
        case 250:
          data_num = 6;
          is_data_num_received = true;
          break;
        case 249:
          data_num = 7;
          is_data_num_received = true;
          break;
        case 248:
          data_num = 8;
          is_data_num_received = true;
          break;
        case 247:
          data_num = 9;
          is_data_num_received = true;
          break;
        case 246:
          data_num = 10;
          is_data_num_received = true;
          break;
        case 245:
          data_num = 11;
          is_data_num_received = true;
          break;
        case 244:
          data_num = 12;
          is_data_num_received = true;
          break;
        default:
          data_num = 13;
          is_data_num_received = true;
          break;
      }
    } else if (incomingByte < 240 && is_data_num_received == true) {
      //jika char kurang dari 240 dan flag sudah dipilih
      inputBuffer[data_num] = incomingByte; //simpan data[100,107,109
      is_data_num_received = false;
      if(data_num == 12) {
        is_data_complete = true;
      }
    } else {
      is_data_num_received = false;
      is_data_complete = false;
    }
  }

  if(is_data_complete == true) {
    //jika data sudah lengkap, tampilkan di serial untuk debuging
    for(int num = 1;num <= 11;num++) {
      dataLoad((num-1),inputBuffer[num]);
//      Serial.print("datanum: ");
//      Serial.print(num-1);
//      Serial.print("  thedata: ");
//      Serial.println(inputBuffer[num]);
//      delay(1); //all commented Serial.print is for debuging the data using Mega (debug data mentah)
    }
    is_data_complete = false; //mengembalikan kondisi bool bahwa data belum complete apabila sudah finish

//    Serial.print("pH1 is:          ");
//    Serial.println(pH1);
//    Serial.print("pH2 is:          ");
//    Serial.println(pH2);
//    Serial.print("tds1 is:         ");
//    Serial.println(tds1);
//    Serial.print("tds2 is:         ");
//    Serial.println(tds2);
//    Serial.print("water_temp is:   ");
//    Serial.println(water_temp);
//    Serial.print("humidity is:     ");
//    Serial.println(humidity);
//    Serial.print("air_temp is:     ");
//    Serial.println(air_temp);
//    Serial.print("co2 is:          ");
//    Serial.println(co2);
//    Serial.println("");
//    Serial.println("");
    pH1Cloud = pH1;
    pH2Cloud = pH2;
    tds1Cloud = tds1;
    tds2Cloud = tds2;
    water_tempCloud = water_temp;
    humidityCloud = humidity; 
    air_tempCloud = air_temp; 
    co2Cloud = co2;
    
    //debug data olahan
    Serial.print("pH1Cloud is:          ");
    Serial.println(pH1Cloud);
    Serial.print("pH2Cloud is:          ");
    Serial.println(pH2Cloud);
    Serial.print("tds1Cloud is:         ");
    Serial.println(tds1Cloud);
    Serial.print("tds2Cloud is:         ");
    Serial.println(tds2Cloud);
    Serial.print("water_tempCloud is:   ");
    Serial.println(water_tempCloud);
    Serial.print("humidityCloud is:     ");
    Serial.println(humidityCloud);
    Serial.print("air_tempCloud is:     ");
    Serial.println(air_tempCloud);
    Serial.print("co2Cloud is:          ");
    Serial.println(co2Cloud);
    Serial.println("");
    Serial.println("");
    } 
  }
/*end of terimaData*/  
 }
  


/*start of dataLoad func*/
void dataLoad(int data_index,int theData) { //fungsinya menload data dari array ke data yang dimengerti user (ie: pH,tds,dll) 
  //data_index = data keberapa
  //theDATA = package data (urutannya: pH1,pH2,tds1,tds2,water_temp,humidity,air_temp,co2

  //kalkulasi data yang dikirim menjadi data asal normalnya untuk ditampilkan (note: akurasi bisa lebih buruk, tergantung rumus kalkulasi, karena constrain data 1 byte hanya 256)
  switch (data_index) {
    case 0: //0 pH1 0-140
      pH1 = ((float)theData);
      break;
      
    case 1: //1 pH2 0-140
      pH2 = theData/10; 
      break;
      
    case 2: //2 tds1[ppm] 3000an
      tds1_a = theData*100;//
      break;
    case 3: //2 tds1[ppm] 3000an
      tds1_b = theData;//
      tds1 = tds1_a+tds1_b;
      break;
          
    case 4: //3 tds2[ppm] 3000an
      tds2_a = theData*100;//
      break;
    case 5: //3 tds2[ppm] 3000an
      tds2_b = theData;//
      tds2 = tds2_a+tds2_b;
      break;
      
    case 6: //4 water_temp [oC] 20-90
      water_temp = theData;
      break;

    case 7: //5 humidity [percentage] 0-100 
      humidity = theData;
      break;
      
    case 8: //6 air temperature [oC] 20-90
      air_temp = theData;;
      break;
      
    case 9: //7 co2[ppm] 5000an
      co2_a = theData*100;// rumus co2 darivoltage
      break;
    case 10:
      co2_b = theData;
      co2 = co2_a+co2_b;
    default:
      break;
  }  
}
/*end of dataLoad func*/
